{"version":3,"sources":["Components/SearchBox.js","Components/Card.js","Components/CardList.js","Actions/change.js","Components/Scroll.js","Containers/App.js","Reducers/changeSearchField.js","serviceWorker.js","index.js"],"names":["SearchBox","onInputChange","className","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","searchField","cards","robots","filter","robot","toLowerCase","includes","map","change","text","payload","Scroll","props","children","App","state","this","length","fetch","then","resp","json","arr","setState","Component","connect","dispatch","event","target","value","initialState","changeSearchField","action","console","log","Object","assign","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gSAQeA,EANG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAChB,OACI,2BAAOC,UAAU,cAAcC,KAAK,SAASC,YAAY,gBAAgBC,SAAUJ,KCW5EK,G,KAZF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OACI,yBAAKP,UAAU,oDACX,yBAAKQ,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAKH,IAC1D,6BACI,4BAAKA,GACL,2BAAIC,OCKLG,EAXE,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,YAGXC,EAHoC,EAAZC,OACAC,QAAO,SAAAC,GAAK,OAAEA,EAAMT,KAAKU,cAAcC,SAASN,EAAYK,kBAE7DE,KAAI,SAAAH,GAAK,OAAG,kBAAC,EAAD,CAAMV,GAAIU,EAAMV,GAAIC,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,WAC1F,OACI,6BACKK,ICFEO,EAPA,SAACC,GACZ,MAAQ,CACJnB,KAAK,sBACLoB,QAAQD,ICQDE,G,MARA,SAACC,GACZ,OACI,yBAAKlB,GAAG,UACHkB,EAAMC,Y,OCObC,G,wDAEJ,aACC,IAAD,8BACE,gBACKC,MAAM,CAACb,OAAO,IAFrB,E,qDAKC,IAAD,EACmCc,KAAKJ,MAAjCZ,EADP,EACOA,YAAaZ,EADpB,EACoBA,cACbc,EAAUc,KAAKD,MAAfb,OACL,OAAIA,EAAOe,OAGT,yBAAK5B,UAAU,KAAKK,GAAG,OACrB,wBAAIL,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,cAAeA,IAC1B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUY,YAAaA,EAAaE,OAAQA,MANzC,yBAAKb,UAAU,SAAQ,6C,0CAYjC,IAAD,OACE6B,MAAM,8CACLC,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAAQF,MAAK,SAACG,GAAD,OAAO,EAAKC,SAAS,CAACrB,OAAOoB,W,GA1B7CE,cA8BHC,eAlCS,SAACV,GAAD,MAAY,CAACf,YAAYe,EAAMf,gBAE5B,SAAC0B,GAAD,MAAe,CAACtC,cAAc,SAACuC,GAAD,OAASD,EAASlB,EAAOmB,EAAMC,OAAOC,YAgChFJ,CAA4CX,G,OC3CrDgB,EAAe,CAAC9B,YAAY,IAanB+B,EAXW,WAAiC,IAAhChB,EAA+B,uDAAzBe,EAAcE,EAAW,uCACtD,OAAOA,EAAO1C,MAEV,IAAK,sBAED,OADA2C,QAAQC,IAAIF,EAAOtB,SACZyB,OAAOC,OAAO,GAAGrB,EAAM,CAACf,YAAYgC,EAAOtB,UACtD,QACI,OAAOK,ICGCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAQC,YAAYZ,GAE1Ba,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.a9b563f7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({onInputChange})=>{\r\n    return (\r\n        <input className='br3 pa2 ma3' type='search' placeholder='search robots' onChange={onInputChange} />\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from  'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n        <div className='bg-light-green dib ma2 pa3 br3 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt={name} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from  'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({searchField, robots}) => {\r\n    let filteredRobots = robots.filter(robot=>robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    // let cards = robots.map(robot=> <Card id={robot.id} name={robot.name} email={robot.email} />);\r\n    let cards = filteredRobots.map(robot=> <Card id={robot.id} name={robot.name} email={robot.email} />);\r\n    return (\r\n        <div>\r\n            {cards}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","const change = (text) => {\r\n    return ({\r\n        type:'CHANGE_SEARCH_FIELD',\r\n        payload:text\r\n    })\r\n}\r\n\r\nexport default change;","import React from  'react';\r\nimport './Scroll.css'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div id='scroll'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\nimport SearchBox from '../Components/SearchBox';\nimport CardList from '../Components/CardList';\nimport change from '../Actions/change';\nimport Scroll from '../Components/Scroll';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport 'tachyons';\n\nconst mapStateToProps = (state) => ({searchField:state.searchField})\n\nconst mapDispatchToProps = (dispatch) => ({onInputChange:(event)=>dispatch(change(event.target.value))})\n\nclass App extends Component\n{\n  constructor()\n  {\n    super();\n    this.state={robots:[]};\n  } \n  render()\n  {\n    let {searchField, onInputChange}=this.props;\n    let {robots} = this.state;\n    if(!robots.length)\n      return <div className='f2 tc'><h1>Loading...</h1></div>\n    else return (\n      <div className='tc' id='app'>\n        <h1 className='f1'>Robofriends</h1>\n        <SearchBox onInputChange={onInputChange} />\n        <Scroll>\n          <CardList searchField={searchField} robots={robots} />\n        </Scroll>      \n      </div>\n    );\n  }\n  componentDidMount()\n  { \n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(resp=>resp.json()).then((arr)=>this.setState({robots:arr}));\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","const initialState = {searchField:''}\r\n\r\nconst changeSearchField = (state=initialState, action) => {\r\n    switch(action.type)\r\n    {\r\n        case 'CHANGE_SEARCH_FIELD':\r\n            console.log(action.payload);\r\n            return Object.assign({},state,{searchField:action.payload}) ;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default changeSearchField;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport changeSearchField from './Reducers/changeSearchField';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(changeSearchField);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}