{"version":3,"sources":["Containers/SearchBox.js","Actions/actions.js","Components/Card.js","Containers/CardList.js","Components/Scroll.js","Containers/App.js","Reducers/changeSearchField.js","Reducers/getRobots.js","Reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["SearchBox","onInputChange","this","props","className","type","placeholder","onChange","Component","connect","dispatch","event","payload","target","value","Card","id","name","email","src","alt","CardList","robots","searchField","cards","filter","robot","toLowerCase","includes","map","state","search","request","Scroll","children","App","isPending","error","requestRobots","fetch","then","resp","json","arr","catch","err","initialState","changeSearchField","action","Object","assign","getRobots","rootReducer","combineReducers","Boolean","window","location","hostname","match","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.17eabc69.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {change} from '../Actions/actions';\r\n\r\nconst mapDispatchToProps = (dispatch) => ({onInputChange:(event)=>dispatch(change(event.target.value))})\r\n\r\nclass SearchBox extends Component {\r\n    render()\r\n    {\r\n        let {onInputChange} = this.props;\r\n        return (\r\n            <input className='br3 pa2 ma3' type='search' placeholder='search robots' onChange={onInputChange} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null,mapDispatchToProps)(SearchBox);","export const change = (text) => {\r\n    return ({\r\n        type:'CHANGE_SEARCH_FIELD',\r\n        payload:text\r\n    })\r\n}\r\n\r\nexport const request = () => (dispatch) =>  {\r\n    dispatch({type:'PENDING'})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(resp=>resp.json())\r\n    .then(arr=> dispatch({type:'SUCCESS', payload:arr}))\r\n    .catch(err=> dispatch({type:'ERROR', payload:err}))\r\n}\r\n\r\n","import React from  'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({id,name,email}) => {\r\n    return (\r\n        <div className='bg-light-green dib ma2 pa3 br3 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt={name} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React,{Component} from  'react';\r\nimport Card from '../Components/Card';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => ({searchField:state.search.searchField, robots:state.request.robots})\r\n\r\nclass CardList extends Component {\r\n    render() {\r\n        let {robots, searchField} = this.props;\r\n        let filteredRobots = robots.filter(robot=>robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n        let cards = filteredRobots.map(robot=> <Card id={robot.id} name={robot.name} email={robot.email} />);\r\n        return (\r\n            <div>\r\n                {cards}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CardList);","import React from  'react';\r\nimport './Scroll.css'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div id='scroll'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport SearchBox from './SearchBox';\r\nimport CardList from './CardList';\r\nimport Scroll from '../Components/Scroll';\r\nimport {request} from '../Actions/actions';\r\nimport './App.css';\r\nimport 'tachyons';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isPending : state.request.isPending,\r\n    error : state.request.error\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({requestRobots : () => dispatch(request())})\r\n\r\nclass App extends Component\r\n{\r\n  render()\r\n  {\r\n    let {isPending, error} = this.props;\r\n    if(error)\r\n      return <div className='f2 tc'><h1>Oops Error...</h1></div>\r\n    else if(isPending)\r\n      return <div className='f2 tc'><h1>Loading...</h1></div>\r\n    else return (\r\n      <div className='tc' id='app'>\r\n        <h1 className='f1'>Robofriends</h1>\r\n        <SearchBox />\r\n        <Scroll>\r\n          <CardList />\r\n        </Scroll>      \r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount()\r\n  {\r\n    this.props.requestRobots();\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const initialState = {searchField:''}\r\n\r\nconst changeSearchField = (state=initialState, action) => {\r\n    switch(action.type)\r\n    {\r\n        case 'CHANGE_SEARCH_FIELD':\r\n            return Object.assign({},state,{searchField:action.payload}) ;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default changeSearchField;","const initialState = {\r\n    robots : [],\r\n    isPending : false,\r\n    error : false\r\n}\r\n\r\nconst getRobots = (state=initialState, action={}) => {\r\n    switch(action.type)\r\n    {\r\n        case 'PENDING':\r\n            return Object.assign({}, state, {isPending:true})\r\n        case 'SUCCESS':\r\n            return Object.assign({}, state, {robots:action.payload, isPending:false})\r\n        case 'ERROR':\r\n            return Object.assign({}, state, {error:true})\r\n        default :\r\n            return state;\r\n    }\r\n    \r\n}\r\n\r\nexport default getRobots;","import changeSearchField from './changeSearchField';\r\nimport getRobots from './getRobots';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst rootReducer = combineReducers({search:changeSearchField, request: getRobots})\r\n\r\nexport default rootReducer;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport rootReducer from './Reducers/rootReducer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}